---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2023/11/10 12:17 AM
---

package.cpath = "./?.so, " .. package.cpath
local unistd = require("posix.unistd")
local sys_wait = require("posix.sys.wait")
local nsenter = require("nsenter")
local elfmap = require("elfmap")
local cjson = require("cjson.safe")


local libFile = "/usr/lib64/libpython2.7.so.1.0"
local r,w = unistd.pipe()
local childpid = unistd.fork()
if childpid == 0 then
    -- child reads from pipe
    unistd.close(r)  -- close unused write end

    local ns = nsenter.new()
    ns:enter(1809, "mnt")
    local map = elfmap.new(libFile)
    ns:exit()

    local cnt = 1
    local cells = {}
    for _, start, stop, symbol in map:maps() do
        cells[cnt] = {start, stop, symbol}
        cnt = cnt + 1
    end

    unistd.write(w, cjson.encode(cells))
    unistd.close(w)
    unistd._exit(0)

else
    -- parent writes to pipe
    unistd.close(w) -- close unused read end

    local s = unistd.read(r, 1024 * 1024)
    print(#s)
    unistd.close(r)
    -- wait for child to finish
    sys_wait.wait(childpid)
end